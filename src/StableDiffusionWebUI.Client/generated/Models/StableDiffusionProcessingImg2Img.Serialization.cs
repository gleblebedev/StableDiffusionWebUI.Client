// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace StableDiffusionWebUI.Client.Models
{
    public partial class StableDiffusionProcessingImg2Img : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(InitImages))
            {
                writer.WritePropertyName("init_images");
                writer.WriteStartArray();
                foreach (var item in InitImages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ResizeMode))
            {
                writer.WritePropertyName("resize_mode");
                writer.WriteNumberValue(ResizeMode.Value);
            }
            if (Optional.IsDefined(DenoisingStrength))
            {
                writer.WritePropertyName("denoising_strength");
                writer.WriteNumberValue(DenoisingStrength.Value);
            }
            if (Optional.IsDefined(Mask))
            {
                writer.WritePropertyName("mask");
                writer.WriteStringValue(Mask);
            }
            if (Optional.IsDefined(MaskBlur))
            {
                writer.WritePropertyName("mask_blur");
                writer.WriteNumberValue(MaskBlur.Value);
            }
            if (Optional.IsDefined(InpaintingFill))
            {
                writer.WritePropertyName("inpainting_fill");
                writer.WriteNumberValue(InpaintingFill.Value);
            }
            if (Optional.IsDefined(InpaintFullRes))
            {
                writer.WritePropertyName("inpaint_full_res");
                writer.WriteBooleanValue(InpaintFullRes.Value);
            }
            if (Optional.IsDefined(InpaintFullResPadding))
            {
                writer.WritePropertyName("inpaint_full_res_padding");
                writer.WriteNumberValue(InpaintFullResPadding.Value);
            }
            if (Optional.IsDefined(InpaintingMaskInvert))
            {
                writer.WritePropertyName("inpainting_mask_invert");
                writer.WriteNumberValue(InpaintingMaskInvert.Value);
            }
            if (Optional.IsDefined(Prompt))
            {
                writer.WritePropertyName("prompt");
                writer.WriteStringValue(Prompt);
            }
            if (Optional.IsCollectionDefined(Styles))
            {
                writer.WritePropertyName("styles");
                writer.WriteStartArray();
                foreach (var item in Styles)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Seed))
            {
                writer.WritePropertyName("seed");
                writer.WriteNumberValue(Seed.Value);
            }
            if (Optional.IsDefined(Subseed))
            {
                writer.WritePropertyName("subseed");
                writer.WriteNumberValue(Subseed.Value);
            }
            if (Optional.IsDefined(SubseedStrength))
            {
                writer.WritePropertyName("subseed_strength");
                writer.WriteNumberValue(SubseedStrength.Value);
            }
            if (Optional.IsDefined(SeedResizeFromH))
            {
                writer.WritePropertyName("seed_resize_from_h");
                writer.WriteNumberValue(SeedResizeFromH.Value);
            }
            if (Optional.IsDefined(SeedResizeFromW))
            {
                writer.WritePropertyName("seed_resize_from_w");
                writer.WriteNumberValue(SeedResizeFromW.Value);
            }
            if (Optional.IsDefined(SamplerName))
            {
                writer.WritePropertyName("sampler_name");
                writer.WriteStringValue(SamplerName);
            }
            if (Optional.IsDefined(BatchSize))
            {
                writer.WritePropertyName("batch_size");
                writer.WriteNumberValue(BatchSize.Value);
            }
            if (Optional.IsDefined(NIter))
            {
                writer.WritePropertyName("n_iter");
                writer.WriteNumberValue(NIter.Value);
            }
            if (Optional.IsDefined(Steps))
            {
                writer.WritePropertyName("steps");
                writer.WriteNumberValue(Steps.Value);
            }
            if (Optional.IsDefined(CfgScale))
            {
                writer.WritePropertyName("cfg_scale");
                writer.WriteNumberValue(CfgScale.Value);
            }
            if (Optional.IsDefined(Width))
            {
                writer.WritePropertyName("width");
                writer.WriteNumberValue(Width.Value);
            }
            if (Optional.IsDefined(Height))
            {
                writer.WritePropertyName("height");
                writer.WriteNumberValue(Height.Value);
            }
            if (Optional.IsDefined(RestoreFaces))
            {
                writer.WritePropertyName("restore_faces");
                writer.WriteBooleanValue(RestoreFaces.Value);
            }
            if (Optional.IsDefined(Tiling))
            {
                writer.WritePropertyName("tiling");
                writer.WriteBooleanValue(Tiling.Value);
            }
            if (Optional.IsDefined(NegativePrompt))
            {
                writer.WritePropertyName("negative_prompt");
                writer.WriteStringValue(NegativePrompt);
            }
            if (Optional.IsDefined(Eta))
            {
                writer.WritePropertyName("eta");
                writer.WriteNumberValue(Eta.Value);
            }
            if (Optional.IsDefined(SChurn))
            {
                writer.WritePropertyName("s_churn");
                writer.WriteNumberValue(SChurn.Value);
            }
            if (Optional.IsDefined(STmax))
            {
                writer.WritePropertyName("s_tmax");
                writer.WriteNumberValue(STmax.Value);
            }
            if (Optional.IsDefined(STmin))
            {
                writer.WritePropertyName("s_tmin");
                writer.WriteNumberValue(STmin.Value);
            }
            if (Optional.IsDefined(SNoise))
            {
                writer.WritePropertyName("s_noise");
                writer.WriteNumberValue(SNoise.Value);
            }
            if (Optional.IsDefined(OverrideSettings))
            {
                writer.WritePropertyName("override_settings");
                writer.WriteObjectValue(OverrideSettings);
            }
            if (Optional.IsDefined(SamplerIndex))
            {
                writer.WritePropertyName("sampler_index");
                writer.WriteStringValue(SamplerIndex);
            }
            if (Optional.IsDefined(IncludeInitImages))
            {
                writer.WritePropertyName("include_init_images");
                writer.WriteBooleanValue(IncludeInitImages.Value);
            }
            writer.WriteEndObject();
        }
    }
}
