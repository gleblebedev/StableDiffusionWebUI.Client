// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace StableDiffusionWebUI.Client.Models
{
    /// <summary> Flags. </summary>
    public partial class Flags
    {
        /// <summary> Initializes a new instance of Flags. </summary>
        internal Flags()
        {
            UseCpu = new ChangeTrackingList<object>();
        }

        /// <summary> Initializes a new instance of Flags. </summary>
        /// <param name="config"> path to config which constructs model. </param>
        /// <param name="ckpt"> path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded. </param>
        /// <param name="ckptDir"> Path to directory with stable diffusion checkpoints. </param>
        /// <param name="gfpganDir"> GFPGAN directory. </param>
        /// <param name="gfpganModel"> GFPGAN model file name. </param>
        /// <param name="noHalf"> do not switch the model to 16-bit floats. </param>
        /// <param name="noHalfVae"> do not switch the VAE model to 16-bit floats. </param>
        /// <param name="noProgressbarHiding"> do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser). </param>
        /// <param name="maxBatchCount"> maximum batch count value for the UI. </param>
        /// <param name="embeddingsDir"> embeddings directory for textual inversion (default: embeddings). </param>
        /// <param name="hypernetworkDir"> hypernetwork directory. </param>
        /// <param name="localizationsDir"> localizations directory. </param>
        /// <param name="allowCode"> allow custom script execution from webui. </param>
        /// <param name="medvram"> enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage. </param>
        /// <param name="lowvram"> enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage. </param>
        /// <param name="lowram"> load stable diffusion checkpoint weights to VRAM instead of RAM. </param>
        /// <param name="alwaysBatchCondUncond"> disables cond/uncond batching that is enabled to save memory with --medvram or --lowvram. </param>
        /// <param name="unloadGfpgan"> does not do anything. </param>
        /// <param name="precision"> evaluate at this precision. </param>
        /// <param name="share"> use share=True for gradio and make the UI accessible through their site. </param>
        /// <param name="ngrok"> ngrok authtoken, alternative to gradio --share. </param>
        /// <param name="ngrokRegion"> The region in which ngrok should start. </param>
        /// <param name="enableInsecureExtensionAccess"> enable extensions tab regardless of other options. </param>
        /// <param name="codeformerModelsPath"> Path to directory with codeformer model file(s). </param>
        /// <param name="gfpganModelsPath"> Path to directory with GFPGAN model file(s). </param>
        /// <param name="esrganModelsPath"> Path to directory with ESRGAN model file(s). </param>
        /// <param name="bsrganModelsPath"> Path to directory with BSRGAN model file(s). </param>
        /// <param name="realesrganModelsPath"> Path to directory with RealESRGAN model file(s). </param>
        /// <param name="scunetModelsPath"> Path to directory with ScuNET model file(s). </param>
        /// <param name="swinirModelsPath"> Path to directory with SwinIR model file(s). </param>
        /// <param name="ldsrModelsPath"> Path to directory with LDSR model file(s). </param>
        /// <param name="clipModelsPath"> Path to directory with CLIP model file(s). </param>
        /// <param name="xformers"> enable xformers for cross attention layers. </param>
        /// <param name="forceEnableXformers"> enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work. </param>
        /// <param name="deepdanbooru"> enable deepdanbooru interrogator. </param>
        /// <param name="optSplitAttention"> force-enables Doggettx&apos;s cross-attention layer optimization. By default, it&apos;s on for torch cuda. </param>
        /// <param name="optSplitAttentionInvokeai"> force-enables InvokeAI&apos;s cross-attention layer optimization. By default, it&apos;s on when cuda is unavailable. </param>
        /// <param name="optSplitAttentionV1"> enable older version of split attention optimization that does not consume all the VRAM it can find. </param>
        /// <param name="disableOptSplitAttention"> force-disables cross-attention layer optimization. </param>
        /// <param name="useCpu"> use CPU as torch device for specified modules. </param>
        /// <param name="listen"> launch gradio with 0.0.0.0 as server name, allowing to respond to network requests. </param>
        /// <param name="port"> launch gradio with given server port, you need root/admin rights for ports &lt; 1024, defaults to 7860 if available. </param>
        /// <param name="showNegativePrompt"> does not do anything. </param>
        /// <param name="uiConfigFile"> filename to use for ui configuration. </param>
        /// <param name="hideUiDirConfig"> hide directory configuration from webui. </param>
        /// <param name="freezeSettings"> disable editing settings. </param>
        /// <param name="uiSettingsFile"> filename to use for ui settings. </param>
        /// <param name="gradioDebug"> launch gradio with --debug option. </param>
        /// <param name="gradioAuth"> set gradio authentication like &quot;username:password&quot;; or comma-delimit multiple like &quot;u1:p1,u2:p2,u3:p3&quot;. </param>
        /// <param name="gradioImg2ImgTool"> gradio image uploader tool: can be either editor for ctopping, or color-sketch for drawing. </param>
        /// <param name="optChannelslast"> change memory type for stable diffusion to channels last. </param>
        /// <param name="stylesFile"> filename to use for styles. </param>
        /// <param name="autolaunch"> open the webui URL in the system&apos;s default browser upon launch. </param>
        /// <param name="theme"> launches the UI with light or dark theme. </param>
        /// <param name="useTextboxSeed"> use textbox for seeds in UI (no up/down, but possible to input long seeds). </param>
        /// <param name="disableConsoleProgressbars"> do not output progressbars to console. </param>
        /// <param name="enableConsolePrompts"> print prompts to console when generating with txt2img and img2img. </param>
        /// <param name="vaePath"> Path to Variational Autoencoders model. </param>
        /// <param name="disableSafeUnpickle"> disable checking pytorch models for malicious code. </param>
        /// <param name="api"> use api=True to launch the api with the webui. </param>
        /// <param name="apiAuth"> Set authentication for api like &quot;username:password&quot;; or comma-delimit multiple like &quot;u1:p1,u2:p2,u3:p3&quot;. </param>
        /// <param name="nowebui"> use api=True to launch the api instead of the webui. </param>
        /// <param name="uiDebugMode"> Don&apos;t load model to quickly launch UI. </param>
        /// <param name="deviceId"> Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before). </param>
        /// <param name="administrator"> Administrator rights. </param>
        /// <param name="corsAllowOrigins"> Allowed CORS origins. </param>
        /// <param name="tlsKeyfile"> Partially enables TLS, requires --tls-certfile to fully function. </param>
        /// <param name="tlsCertfile"> Partially enables TLS, requires --tls-keyfile to fully function. </param>
        /// <param name="serverName"> Sets hostname of server. </param>
        /// <param name="dreamboothModelsPath"> Path to directory to store Dreambooth model file(s). </param>
        internal Flags(string config, string ckpt, string ckptDir, string gfpganDir, string gfpganModel, bool? noHalf, bool? noHalfVae, bool? noProgressbarHiding, int? maxBatchCount, string embeddingsDir, string hypernetworkDir, string localizationsDir, bool? allowCode, bool? medvram, bool? lowvram, bool? lowram, bool? alwaysBatchCondUncond, bool? unloadGfpgan, string precision, bool? share, string ngrok, string ngrokRegion, bool? enableInsecureExtensionAccess, string codeformerModelsPath, string gfpganModelsPath, string esrganModelsPath, string bsrganModelsPath, string realesrganModelsPath, string scunetModelsPath, string swinirModelsPath, string ldsrModelsPath, string clipModelsPath, bool? xformers, bool? forceEnableXformers, bool? deepdanbooru, bool? optSplitAttention, bool? optSplitAttentionInvokeai, bool? optSplitAttentionV1, bool? disableOptSplitAttention, IReadOnlyList<object> useCpu, bool? listen, string port, bool? showNegativePrompt, string uiConfigFile, bool? hideUiDirConfig, bool? freezeSettings, string uiSettingsFile, bool? gradioDebug, string gradioAuth, string gradioImg2ImgTool, bool? optChannelslast, string stylesFile, bool? autolaunch, string theme, bool? useTextboxSeed, bool? disableConsoleProgressbars, bool? enableConsolePrompts, string vaePath, bool? disableSafeUnpickle, bool? api, string apiAuth, bool? nowebui, bool? uiDebugMode, string deviceId, bool? administrator, string corsAllowOrigins, string tlsKeyfile, string tlsCertfile, string serverName, string dreamboothModelsPath)
        {
            Config = config;
            Ckpt = ckpt;
            CkptDir = ckptDir;
            GfpganDir = gfpganDir;
            GfpganModel = gfpganModel;
            NoHalf = noHalf;
            NoHalfVae = noHalfVae;
            NoProgressbarHiding = noProgressbarHiding;
            MaxBatchCount = maxBatchCount;
            EmbeddingsDir = embeddingsDir;
            HypernetworkDir = hypernetworkDir;
            LocalizationsDir = localizationsDir;
            AllowCode = allowCode;
            Medvram = medvram;
            Lowvram = lowvram;
            Lowram = lowram;
            AlwaysBatchCondUncond = alwaysBatchCondUncond;
            UnloadGfpgan = unloadGfpgan;
            Precision = precision;
            Share = share;
            Ngrok = ngrok;
            NgrokRegion = ngrokRegion;
            EnableInsecureExtensionAccess = enableInsecureExtensionAccess;
            CodeformerModelsPath = codeformerModelsPath;
            GfpganModelsPath = gfpganModelsPath;
            EsrganModelsPath = esrganModelsPath;
            BsrganModelsPath = bsrganModelsPath;
            RealesrganModelsPath = realesrganModelsPath;
            ScunetModelsPath = scunetModelsPath;
            SwinirModelsPath = swinirModelsPath;
            LdsrModelsPath = ldsrModelsPath;
            ClipModelsPath = clipModelsPath;
            Xformers = xformers;
            ForceEnableXformers = forceEnableXformers;
            Deepdanbooru = deepdanbooru;
            OptSplitAttention = optSplitAttention;
            OptSplitAttentionInvokeai = optSplitAttentionInvokeai;
            OptSplitAttentionV1 = optSplitAttentionV1;
            DisableOptSplitAttention = disableOptSplitAttention;
            UseCpu = useCpu;
            Listen = listen;
            Port = port;
            ShowNegativePrompt = showNegativePrompt;
            UiConfigFile = uiConfigFile;
            HideUiDirConfig = hideUiDirConfig;
            FreezeSettings = freezeSettings;
            UiSettingsFile = uiSettingsFile;
            GradioDebug = gradioDebug;
            GradioAuth = gradioAuth;
            GradioImg2ImgTool = gradioImg2ImgTool;
            OptChannelslast = optChannelslast;
            StylesFile = stylesFile;
            Autolaunch = autolaunch;
            Theme = theme;
            UseTextboxSeed = useTextboxSeed;
            DisableConsoleProgressbars = disableConsoleProgressbars;
            EnableConsolePrompts = enableConsolePrompts;
            VaePath = vaePath;
            DisableSafeUnpickle = disableSafeUnpickle;
            Api = api;
            ApiAuth = apiAuth;
            Nowebui = nowebui;
            UiDebugMode = uiDebugMode;
            DeviceId = deviceId;
            Administrator = administrator;
            CorsAllowOrigins = corsAllowOrigins;
            TlsKeyfile = tlsKeyfile;
            TlsCertfile = tlsCertfile;
            ServerName = serverName;
            DreamboothModelsPath = dreamboothModelsPath;
        }

        /// <summary> path to config which constructs model. </summary>
        public string Config { get; }
        /// <summary> path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded. </summary>
        public string Ckpt { get; }
        /// <summary> Path to directory with stable diffusion checkpoints. </summary>
        public string CkptDir { get; }
        /// <summary> GFPGAN directory. </summary>
        public string GfpganDir { get; }
        /// <summary> GFPGAN model file name. </summary>
        public string GfpganModel { get; }
        /// <summary> do not switch the model to 16-bit floats. </summary>
        public bool? NoHalf { get; }
        /// <summary> do not switch the VAE model to 16-bit floats. </summary>
        public bool? NoHalfVae { get; }
        /// <summary> do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser). </summary>
        public bool? NoProgressbarHiding { get; }
        /// <summary> maximum batch count value for the UI. </summary>
        public int? MaxBatchCount { get; }
        /// <summary> embeddings directory for textual inversion (default: embeddings). </summary>
        public string EmbeddingsDir { get; }
        /// <summary> hypernetwork directory. </summary>
        public string HypernetworkDir { get; }
        /// <summary> localizations directory. </summary>
        public string LocalizationsDir { get; }
        /// <summary> allow custom script execution from webui. </summary>
        public bool? AllowCode { get; }
        /// <summary> enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage. </summary>
        public bool? Medvram { get; }
        /// <summary> enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage. </summary>
        public bool? Lowvram { get; }
        /// <summary> load stable diffusion checkpoint weights to VRAM instead of RAM. </summary>
        public bool? Lowram { get; }
        /// <summary> disables cond/uncond batching that is enabled to save memory with --medvram or --lowvram. </summary>
        public bool? AlwaysBatchCondUncond { get; }
        /// <summary> does not do anything. </summary>
        public bool? UnloadGfpgan { get; }
        /// <summary> evaluate at this precision. </summary>
        public string Precision { get; }
        /// <summary> use share=True for gradio and make the UI accessible through their site. </summary>
        public bool? Share { get; }
        /// <summary> ngrok authtoken, alternative to gradio --share. </summary>
        public string Ngrok { get; }
        /// <summary> The region in which ngrok should start. </summary>
        public string NgrokRegion { get; }
        /// <summary> enable extensions tab regardless of other options. </summary>
        public bool? EnableInsecureExtensionAccess { get; }
        /// <summary> Path to directory with codeformer model file(s). </summary>
        public string CodeformerModelsPath { get; }
        /// <summary> Path to directory with GFPGAN model file(s). </summary>
        public string GfpganModelsPath { get; }
        /// <summary> Path to directory with ESRGAN model file(s). </summary>
        public string EsrganModelsPath { get; }
        /// <summary> Path to directory with BSRGAN model file(s). </summary>
        public string BsrganModelsPath { get; }
        /// <summary> Path to directory with RealESRGAN model file(s). </summary>
        public string RealesrganModelsPath { get; }
        /// <summary> Path to directory with ScuNET model file(s). </summary>
        public string ScunetModelsPath { get; }
        /// <summary> Path to directory with SwinIR model file(s). </summary>
        public string SwinirModelsPath { get; }
        /// <summary> Path to directory with LDSR model file(s). </summary>
        public string LdsrModelsPath { get; }
        /// <summary> Path to directory with CLIP model file(s). </summary>
        public string ClipModelsPath { get; }
        /// <summary> enable xformers for cross attention layers. </summary>
        public bool? Xformers { get; }
        /// <summary> enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work. </summary>
        public bool? ForceEnableXformers { get; }
        /// <summary> enable deepdanbooru interrogator. </summary>
        public bool? Deepdanbooru { get; }
        /// <summary> force-enables Doggettx&apos;s cross-attention layer optimization. By default, it&apos;s on for torch cuda. </summary>
        public bool? OptSplitAttention { get; }
        /// <summary> force-enables InvokeAI&apos;s cross-attention layer optimization. By default, it&apos;s on when cuda is unavailable. </summary>
        public bool? OptSplitAttentionInvokeai { get; }
        /// <summary> enable older version of split attention optimization that does not consume all the VRAM it can find. </summary>
        public bool? OptSplitAttentionV1 { get; }
        /// <summary> force-disables cross-attention layer optimization. </summary>
        public bool? DisableOptSplitAttention { get; }
        /// <summary> use CPU as torch device for specified modules. </summary>
        public IReadOnlyList<object> UseCpu { get; }
        /// <summary> launch gradio with 0.0.0.0 as server name, allowing to respond to network requests. </summary>
        public bool? Listen { get; }
        /// <summary> launch gradio with given server port, you need root/admin rights for ports &lt; 1024, defaults to 7860 if available. </summary>
        public string Port { get; }
        /// <summary> does not do anything. </summary>
        public bool? ShowNegativePrompt { get; }
        /// <summary> filename to use for ui configuration. </summary>
        public string UiConfigFile { get; }
        /// <summary> hide directory configuration from webui. </summary>
        public bool? HideUiDirConfig { get; }
        /// <summary> disable editing settings. </summary>
        public bool? FreezeSettings { get; }
        /// <summary> filename to use for ui settings. </summary>
        public string UiSettingsFile { get; }
        /// <summary> launch gradio with --debug option. </summary>
        public bool? GradioDebug { get; }
        /// <summary> set gradio authentication like &quot;username:password&quot;; or comma-delimit multiple like &quot;u1:p1,u2:p2,u3:p3&quot;. </summary>
        public string GradioAuth { get; }
        /// <summary> gradio image uploader tool: can be either editor for ctopping, or color-sketch for drawing. </summary>
        public string GradioImg2ImgTool { get; }
        /// <summary> change memory type for stable diffusion to channels last. </summary>
        public bool? OptChannelslast { get; }
        /// <summary> filename to use for styles. </summary>
        public string StylesFile { get; }
        /// <summary> open the webui URL in the system&apos;s default browser upon launch. </summary>
        public bool? Autolaunch { get; }
        /// <summary> launches the UI with light or dark theme. </summary>
        public string Theme { get; }
        /// <summary> use textbox for seeds in UI (no up/down, but possible to input long seeds). </summary>
        public bool? UseTextboxSeed { get; }
        /// <summary> do not output progressbars to console. </summary>
        public bool? DisableConsoleProgressbars { get; }
        /// <summary> print prompts to console when generating with txt2img and img2img. </summary>
        public bool? EnableConsolePrompts { get; }
        /// <summary> Path to Variational Autoencoders model. </summary>
        public string VaePath { get; }
        /// <summary> disable checking pytorch models for malicious code. </summary>
        public bool? DisableSafeUnpickle { get; }
        /// <summary> use api=True to launch the api with the webui. </summary>
        public bool? Api { get; }
        /// <summary> Set authentication for api like &quot;username:password&quot;; or comma-delimit multiple like &quot;u1:p1,u2:p2,u3:p3&quot;. </summary>
        public string ApiAuth { get; }
        /// <summary> use api=True to launch the api instead of the webui. </summary>
        public bool? Nowebui { get; }
        /// <summary> Don&apos;t load model to quickly launch UI. </summary>
        public bool? UiDebugMode { get; }
        /// <summary> Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before). </summary>
        public string DeviceId { get; }
        /// <summary> Administrator rights. </summary>
        public bool? Administrator { get; }
        /// <summary> Allowed CORS origins. </summary>
        public string CorsAllowOrigins { get; }
        /// <summary> Partially enables TLS, requires --tls-certfile to fully function. </summary>
        public string TlsKeyfile { get; }
        /// <summary> Partially enables TLS, requires --tls-keyfile to fully function. </summary>
        public string TlsCertfile { get; }
        /// <summary> Sets hostname of server. </summary>
        public string ServerName { get; }
        /// <summary> Path to directory to store Dreambooth model file(s). </summary>
        public string DreamboothModelsPath { get; }
    }
}
