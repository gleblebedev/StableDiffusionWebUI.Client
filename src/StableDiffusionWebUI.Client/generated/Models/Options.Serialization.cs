// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace StableDiffusionWebUI.Client.Models
{
    public partial class Options
    {
        internal static Options DeserializeOptions(JsonElement element)
        {
            Optional<bool> samplesSave = default;
            Optional<string> samplesFormat = default;
            Optional<string> samplesFilenamePattern = default;
            Optional<bool> saveImagesAddNumber = default;
            Optional<bool> gridSave = default;
            Optional<string> gridFormat = default;
            Optional<bool> gridExtendedFilename = default;
            Optional<bool> gridOnlyIfMultiple = default;
            Optional<bool> gridPreventEmptySpots = default;
            Optional<float> nRows = default;
            Optional<bool> enablePnginfo = default;
            Optional<bool> saveTxt = default;
            Optional<bool> saveImagesBeforeFaceRestoration = default;
            Optional<bool> saveImagesBeforeHighresFix = default;
            Optional<bool> saveImagesBeforeColorCorrection = default;
            Optional<float> jpegQuality = default;
            Optional<bool> exportFor4chan = default;
            Optional<bool> useOriginalNameBatch = default;
            Optional<bool> saveSelectedOnly = default;
            Optional<bool> doNotAddWatermark = default;
            Optional<string> outdirSamples = default;
            Optional<string> outdirTxt2imgSamples = default;
            Optional<string> outdirImg2imgSamples = default;
            Optional<string> outdirExtrasSamples = default;
            Optional<string> outdirGrids = default;
            Optional<string> outdirTxt2imgGrids = default;
            Optional<string> outdirImg2imgGrids = default;
            Optional<string> outdirSave = default;
            Optional<bool> saveToDirs = default;
            Optional<bool> gridSaveToDirs = default;
            Optional<bool> useSaveToDirsForUi = default;
            Optional<string> directoriesFilenamePattern = default;
            Optional<float> directoriesMaxPromptWords = default;
            Optional<float> esrganTile = default;
            Optional<float> esrganTileOverlap = default;
            Optional<IReadOnlyList<object>> realesrganEnabledModels = default;
            Optional<float> swinTile = default;
            Optional<float> swinTileOverlap = default;
            Optional<float> ldsrSteps = default;
            Optional<string> upscalerForImg2img = default;
            Optional<bool> useScaleLatentForHiresFix = default;
            Optional<string> faceRestorationModel = default;
            Optional<float> codeFormerWeight = default;
            Optional<bool> faceRestorationUnload = default;
            Optional<float> memmonPollRate = default;
            Optional<bool> samplesLogStdout = default;
            Optional<bool> multipleTqdm = default;
            Optional<bool> unloadModelsWhenTraining = default;
            Optional<bool> shuffleTags = default;
            Optional<float> tagDropOut = default;
            Optional<bool> saveOptimizerState = default;
            Optional<string> datasetFilenameWordRegex = default;
            Optional<string> datasetFilenameJoinString = default;
            Optional<float> trainingImageRepeatsPerEpoch = default;
            Optional<float> trainingWriteCsvEvery = default;
            Optional<bool> trainingXattentionOptimizations = default;
            Optional<string> sdModelCheckpoint = default;
            Optional<float> sdCheckpointCache = default;
            Optional<string> sdVae = default;
            Optional<string> sdVaeAsDefault = default;
            Optional<string> sdHypernetwork = default;
            Optional<int> sdHypernetworkStrength = default;
            Optional<int> inpaintingMaskWeight = default;
            Optional<bool> img2imgColorCorrection = default;
            Optional<bool> img2imgFixSteps = default;
            Optional<bool> enableQuantization = default;
            Optional<bool> enableEmphasis = default;
            Optional<bool> useOldEmphasisImplementation = default;
            Optional<bool> enableBatchSeeds = default;
            Optional<float> commaPaddingBacktrack = default;
            Optional<bool> filterNsfw = default;
            Optional<float> clipStopAtLastLayers = default;
            Optional<IReadOnlyList<object>> randomArtistCategories = default;
            Optional<bool> interrogateKeepModelsInMemory = default;
            Optional<bool> interrogateUseBuiltinArtists = default;
            Optional<bool> interrogateReturnRanks = default;
            Optional<float> interrogateClipNumBeams = default;
            Optional<float> interrogateClipMinLength = default;
            Optional<float> interrogateClipMaxLength = default;
            Optional<float> interrogateClipDictLimit = default;
            Optional<float> interrogateDeepbooruScoreThreshold = default;
            Optional<bool> deepbooruSortAlpha = default;
            Optional<bool> deepbooruUseSpaces = default;
            Optional<bool> deepbooruEscape = default;
            Optional<bool> showProgressbar = default;
            Optional<float> showProgressEveryNSteps = default;
            Optional<bool> showProgressGrid = default;
            Optional<bool> returnGrid = default;
            Optional<bool> doNotShowImages = default;
            Optional<bool> addModelHashToInfo = default;
            Optional<bool> addModelNameToInfo = default;
            Optional<bool> disableWeightsAutoSwap = default;
            Optional<bool> sendSeed = default;
            Optional<string> font = default;
            Optional<bool> jsModalLightbox = default;
            Optional<bool> jsModalLightboxInitiallyZoomed = default;
            Optional<bool> showProgressInTitle = default;
            Optional<string> quicksettings = default;
            Optional<string> localization = default;
            Optional<IReadOnlyList<object>> hideSamplers = default;
            Optional<int> etaDdim = default;
            Optional<int> etaAncestral = default;
            Optional<string> ddimDiscretize = default;
            Optional<int> sChurn = default;
            Optional<int> sTmin = default;
            Optional<int> sNoise = default;
            Optional<float> etaNoiseSeedDelta = default;
            Optional<IReadOnlyList<object>> disabledExtensions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("samples_save"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    samplesSave = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("samples_format"))
                {
                    samplesFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("samples_filename_pattern"))
                {
                    samplesFilenamePattern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("save_images_add_number"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveImagesAddNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("grid_save"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gridSave = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("grid_format"))
                {
                    gridFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("grid_extended_filename"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gridExtendedFilename = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("grid_only_if_multiple"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gridOnlyIfMultiple = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("grid_prevent_empty_spots"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gridPreventEmptySpots = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("n_rows"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nRows = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("enable_pnginfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enablePnginfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("save_txt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveTxt = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("save_images_before_face_restoration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveImagesBeforeFaceRestoration = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("save_images_before_highres_fix"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveImagesBeforeHighresFix = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("save_images_before_color_correction"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveImagesBeforeColorCorrection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("jpeg_quality"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jpegQuality = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("export_for_4chan"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    exportFor4chan = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("use_original_name_batch"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    useOriginalNameBatch = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("save_selected_only"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveSelectedOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("do_not_add_watermark"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    doNotAddWatermark = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("outdir_samples"))
                {
                    outdirSamples = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outdir_txt2img_samples"))
                {
                    outdirTxt2imgSamples = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outdir_img2img_samples"))
                {
                    outdirImg2imgSamples = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outdir_extras_samples"))
                {
                    outdirExtrasSamples = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outdir_grids"))
                {
                    outdirGrids = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outdir_txt2img_grids"))
                {
                    outdirTxt2imgGrids = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outdir_img2img_grids"))
                {
                    outdirImg2imgGrids = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outdir_save"))
                {
                    outdirSave = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("save_to_dirs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveToDirs = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("grid_save_to_dirs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gridSaveToDirs = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("use_save_to_dirs_for_ui"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    useSaveToDirsForUi = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("directories_filename_pattern"))
                {
                    directoriesFilenamePattern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("directories_max_prompt_words"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    directoriesMaxPromptWords = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("ESRGAN_tile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    esrganTile = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("ESRGAN_tile_overlap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    esrganTileOverlap = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("realesrgan_enabled_models"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    realesrganEnabledModels = array;
                    continue;
                }
                if (property.NameEquals("SWIN_tile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    swinTile = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("SWIN_tile_overlap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    swinTileOverlap = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("ldsr_steps"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ldsrSteps = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("upscaler_for_img2img"))
                {
                    upscalerForImg2img = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("use_scale_latent_for_hires_fix"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    useScaleLatentForHiresFix = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("face_restoration_model"))
                {
                    faceRestorationModel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("code_former_weight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    codeFormerWeight = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("face_restoration_unload"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    faceRestorationUnload = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("memmon_poll_rate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    memmonPollRate = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("samples_log_stdout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    samplesLogStdout = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("multiple_tqdm"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    multipleTqdm = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("unload_models_when_training"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    unloadModelsWhenTraining = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("shuffle_tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    shuffleTags = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("tag_drop_out"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tagDropOut = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("save_optimizer_state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saveOptimizerState = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dataset_filename_word_regex"))
                {
                    datasetFilenameWordRegex = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataset_filename_join_string"))
                {
                    datasetFilenameJoinString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("training_image_repeats_per_epoch"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trainingImageRepeatsPerEpoch = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("training_write_csv_every"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trainingWriteCsvEvery = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("training_xattention_optimizations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trainingXattentionOptimizations = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sd_model_checkpoint"))
                {
                    sdModelCheckpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sd_checkpoint_cache"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sdCheckpointCache = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sd_vae"))
                {
                    sdVae = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sd_vae_as_default"))
                {
                    sdVaeAsDefault = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sd_hypernetwork"))
                {
                    sdHypernetwork = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sd_hypernetwork_strength"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sdHypernetworkStrength = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("inpainting_mask_weight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    inpaintingMaskWeight = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("img2img_color_correction"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    img2imgColorCorrection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("img2img_fix_steps"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    img2imgFixSteps = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enable_quantization"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableQuantization = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enable_emphasis"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableEmphasis = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("use_old_emphasis_implementation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    useOldEmphasisImplementation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enable_batch_seeds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableBatchSeeds = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("comma_padding_backtrack"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    commaPaddingBacktrack = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("filter_nsfw"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    filterNsfw = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("CLIP_stop_at_last_layers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clipStopAtLastLayers = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("random_artist_categories"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    randomArtistCategories = array;
                    continue;
                }
                if (property.NameEquals("interrogate_keep_models_in_memory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateKeepModelsInMemory = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("interrogate_use_builtin_artists"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateUseBuiltinArtists = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("interrogate_return_ranks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateReturnRanks = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("interrogate_clip_num_beams"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateClipNumBeams = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("interrogate_clip_min_length"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateClipMinLength = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("interrogate_clip_max_length"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateClipMaxLength = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("interrogate_clip_dict_limit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateClipDictLimit = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("interrogate_deepbooru_score_threshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interrogateDeepbooruScoreThreshold = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("deepbooru_sort_alpha"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deepbooruSortAlpha = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deepbooru_use_spaces"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deepbooruUseSpaces = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deepbooru_escape"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deepbooruEscape = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("show_progressbar"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    showProgressbar = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("show_progress_every_n_steps"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    showProgressEveryNSteps = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("show_progress_grid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    showProgressGrid = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("return_grid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    returnGrid = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("do_not_show_images"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    doNotShowImages = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("add_model_hash_to_info"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    addModelHashToInfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("add_model_name_to_info"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    addModelNameToInfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("disable_weights_auto_swap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    disableWeightsAutoSwap = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("send_seed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sendSeed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("font"))
                {
                    font = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("js_modal_lightbox"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jsModalLightbox = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("js_modal_lightbox_initially_zoomed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jsModalLightboxInitiallyZoomed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("show_progress_in_title"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    showProgressInTitle = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("quicksettings"))
                {
                    quicksettings = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localization"))
                {
                    localization = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hide_samplers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    hideSamplers = array;
                    continue;
                }
                if (property.NameEquals("eta_ddim"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etaDdim = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("eta_ancestral"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etaAncestral = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ddim_discretize"))
                {
                    ddimDiscretize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("s_churn"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sChurn = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("s_tmin"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sTmin = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("s_noise"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sNoise = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("eta_noise_seed_delta"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etaNoiseSeedDelta = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("disabled_extensions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    disabledExtensions = array;
                    continue;
                }
            }
            return new Options(Optional.ToNullable(samplesSave), samplesFormat.Value, samplesFilenamePattern.Value, Optional.ToNullable(saveImagesAddNumber), Optional.ToNullable(gridSave), gridFormat.Value, Optional.ToNullable(gridExtendedFilename), Optional.ToNullable(gridOnlyIfMultiple), Optional.ToNullable(gridPreventEmptySpots), Optional.ToNullable(nRows), Optional.ToNullable(enablePnginfo), Optional.ToNullable(saveTxt), Optional.ToNullable(saveImagesBeforeFaceRestoration), Optional.ToNullable(saveImagesBeforeHighresFix), Optional.ToNullable(saveImagesBeforeColorCorrection), Optional.ToNullable(jpegQuality), Optional.ToNullable(exportFor4chan), Optional.ToNullable(useOriginalNameBatch), Optional.ToNullable(saveSelectedOnly), Optional.ToNullable(doNotAddWatermark), outdirSamples.Value, outdirTxt2imgSamples.Value, outdirImg2imgSamples.Value, outdirExtrasSamples.Value, outdirGrids.Value, outdirTxt2imgGrids.Value, outdirImg2imgGrids.Value, outdirSave.Value, Optional.ToNullable(saveToDirs), Optional.ToNullable(gridSaveToDirs), Optional.ToNullable(useSaveToDirsForUi), directoriesFilenamePattern.Value, Optional.ToNullable(directoriesMaxPromptWords), Optional.ToNullable(esrganTile), Optional.ToNullable(esrganTileOverlap), Optional.ToList(realesrganEnabledModels), Optional.ToNullable(swinTile), Optional.ToNullable(swinTileOverlap), Optional.ToNullable(ldsrSteps), upscalerForImg2img.Value, Optional.ToNullable(useScaleLatentForHiresFix), faceRestorationModel.Value, Optional.ToNullable(codeFormerWeight), Optional.ToNullable(faceRestorationUnload), Optional.ToNullable(memmonPollRate), Optional.ToNullable(samplesLogStdout), Optional.ToNullable(multipleTqdm), Optional.ToNullable(unloadModelsWhenTraining), Optional.ToNullable(shuffleTags), Optional.ToNullable(tagDropOut), Optional.ToNullable(saveOptimizerState), datasetFilenameWordRegex.Value, datasetFilenameJoinString.Value, Optional.ToNullable(trainingImageRepeatsPerEpoch), Optional.ToNullable(trainingWriteCsvEvery), Optional.ToNullable(trainingXattentionOptimizations), sdModelCheckpoint.Value, Optional.ToNullable(sdCheckpointCache), sdVae.Value, sdVaeAsDefault.Value, sdHypernetwork.Value, Optional.ToNullable(sdHypernetworkStrength), Optional.ToNullable(inpaintingMaskWeight), Optional.ToNullable(img2imgColorCorrection), Optional.ToNullable(img2imgFixSteps), Optional.ToNullable(enableQuantization), Optional.ToNullable(enableEmphasis), Optional.ToNullable(useOldEmphasisImplementation), Optional.ToNullable(enableBatchSeeds), Optional.ToNullable(commaPaddingBacktrack), Optional.ToNullable(filterNsfw), Optional.ToNullable(clipStopAtLastLayers), Optional.ToList(randomArtistCategories), Optional.ToNullable(interrogateKeepModelsInMemory), Optional.ToNullable(interrogateUseBuiltinArtists), Optional.ToNullable(interrogateReturnRanks), Optional.ToNullable(interrogateClipNumBeams), Optional.ToNullable(interrogateClipMinLength), Optional.ToNullable(interrogateClipMaxLength), Optional.ToNullable(interrogateClipDictLimit), Optional.ToNullable(interrogateDeepbooruScoreThreshold), Optional.ToNullable(deepbooruSortAlpha), Optional.ToNullable(deepbooruUseSpaces), Optional.ToNullable(deepbooruEscape), Optional.ToNullable(showProgressbar), Optional.ToNullable(showProgressEveryNSteps), Optional.ToNullable(showProgressGrid), Optional.ToNullable(returnGrid), Optional.ToNullable(doNotShowImages), Optional.ToNullable(addModelHashToInfo), Optional.ToNullable(addModelNameToInfo), Optional.ToNullable(disableWeightsAutoSwap), Optional.ToNullable(sendSeed), font.Value, Optional.ToNullable(jsModalLightbox), Optional.ToNullable(jsModalLightboxInitiallyZoomed), Optional.ToNullable(showProgressInTitle), quicksettings.Value, localization.Value, Optional.ToList(hideSamplers), Optional.ToNullable(etaDdim), Optional.ToNullable(etaAncestral), ddimDiscretize.Value, Optional.ToNullable(sChurn), Optional.ToNullable(sTmin), Optional.ToNullable(sNoise), Optional.ToNullable(etaNoiseSeedDelta), Optional.ToList(disabledExtensions));
        }
    }
}
