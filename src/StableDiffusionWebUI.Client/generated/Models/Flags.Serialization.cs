// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace StableDiffusionWebUI.Client.Models
{
    public partial class Flags
    {
        internal static Flags DeserializeFlags(JsonElement element)
        {
            Optional<string> config = default;
            Optional<string> ckpt = default;
            Optional<string> ckptDir = default;
            Optional<string> gfpganDir = default;
            Optional<string> gfpganModel = default;
            Optional<bool> noHalf = default;
            Optional<bool> noHalfVae = default;
            Optional<bool> noProgressbarHiding = default;
            Optional<int> maxBatchCount = default;
            Optional<string> embeddingsDir = default;
            Optional<string> hypernetworkDir = default;
            Optional<string> localizationsDir = default;
            Optional<bool> allowCode = default;
            Optional<bool> medvram = default;
            Optional<bool> lowvram = default;
            Optional<bool> lowram = default;
            Optional<bool> alwaysBatchCondUncond = default;
            Optional<bool> unloadGfpgan = default;
            Optional<string> precision = default;
            Optional<bool> share = default;
            Optional<string> ngrok = default;
            Optional<string> ngrokRegion = default;
            Optional<bool> enableInsecureExtensionAccess = default;
            Optional<string> codeformerModelsPath = default;
            Optional<string> gfpganModelsPath = default;
            Optional<string> esrganModelsPath = default;
            Optional<string> bsrganModelsPath = default;
            Optional<string> realesrganModelsPath = default;
            Optional<string> scunetModelsPath = default;
            Optional<string> swinirModelsPath = default;
            Optional<string> ldsrModelsPath = default;
            Optional<string> clipModelsPath = default;
            Optional<bool> xformers = default;
            Optional<bool> forceEnableXformers = default;
            Optional<bool> deepdanbooru = default;
            Optional<bool> optSplitAttention = default;
            Optional<bool> optSplitAttentionInvokeai = default;
            Optional<bool> optSplitAttentionV1 = default;
            Optional<bool> disableOptSplitAttention = default;
            Optional<IReadOnlyList<object>> useCpu = default;
            Optional<bool> listen = default;
            Optional<string> port = default;
            Optional<bool> showNegativePrompt = default;
            Optional<string> uiConfigFile = default;
            Optional<bool> hideUiDirConfig = default;
            Optional<bool> freezeSettings = default;
            Optional<string> uiSettingsFile = default;
            Optional<bool> gradioDebug = default;
            Optional<string> gradioAuth = default;
            Optional<string> gradioImg2imgTool = default;
            Optional<bool> optChannelslast = default;
            Optional<string> stylesFile = default;
            Optional<bool> autolaunch = default;
            Optional<string> theme = default;
            Optional<bool> useTextboxSeed = default;
            Optional<bool> disableConsoleProgressbars = default;
            Optional<bool> enableConsolePrompts = default;
            Optional<string> vaePath = default;
            Optional<bool> disableSafeUnpickle = default;
            Optional<bool> api = default;
            Optional<string> apiAuth = default;
            Optional<bool> nowebui = default;
            Optional<bool> uiDebugMode = default;
            Optional<string> deviceId = default;
            Optional<bool> administrator = default;
            Optional<string> corsAllowOrigins = default;
            Optional<string> tlsKeyfile = default;
            Optional<string> tlsCertfile = default;
            Optional<string> serverName = default;
            Optional<string> dreamboothModelsPath = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("config"))
                {
                    config = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ckpt"))
                {
                    ckpt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ckpt_dir"))
                {
                    ckptDir = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gfpgan_dir"))
                {
                    gfpganDir = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gfpgan_model"))
                {
                    gfpganModel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("no_half"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    noHalf = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("no_half_vae"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    noHalfVae = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("no_progressbar_hiding"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    noProgressbarHiding = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("max_batch_count"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxBatchCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("embeddings_dir"))
                {
                    embeddingsDir = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hypernetwork_dir"))
                {
                    hypernetworkDir = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localizations_dir"))
                {
                    localizationsDir = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("allow_code"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allowCode = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("medvram"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    medvram = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lowvram"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lowvram = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lowram"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lowram = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("always_batch_cond_uncond"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    alwaysBatchCondUncond = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("unload_gfpgan"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    unloadGfpgan = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("precision"))
                {
                    precision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("share"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    share = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ngrok"))
                {
                    ngrok = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ngrok_region"))
                {
                    ngrokRegion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enable_insecure_extension_access"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableInsecureExtensionAccess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("codeformer_models_path"))
                {
                    codeformerModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gfpgan_models_path"))
                {
                    gfpganModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("esrgan_models_path"))
                {
                    esrganModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bsrgan_models_path"))
                {
                    bsrganModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("realesrgan_models_path"))
                {
                    realesrganModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scunet_models_path"))
                {
                    scunetModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("swinir_models_path"))
                {
                    swinirModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ldsr_models_path"))
                {
                    ldsrModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clip_models_path"))
                {
                    clipModelsPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("xformers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    xformers = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("force_enable_xformers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    forceEnableXformers = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deepdanbooru"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deepdanbooru = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("opt_split_attention"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    optSplitAttention = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("opt_split_attention_invokeai"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    optSplitAttentionInvokeai = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("opt_split_attention_v1"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    optSplitAttentionV1 = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("disable_opt_split_attention"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    disableOptSplitAttention = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("use_cpu"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    useCpu = array;
                    continue;
                }
                if (property.NameEquals("listen"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    listen = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("port"))
                {
                    port = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("show_negative_prompt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    showNegativePrompt = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ui_config_file"))
                {
                    uiConfigFile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hide_ui_dir_config"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hideUiDirConfig = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("freeze_settings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    freezeSettings = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ui_settings_file"))
                {
                    uiSettingsFile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gradio_debug"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gradioDebug = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("gradio_auth"))
                {
                    gradioAuth = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gradio_img2img_tool"))
                {
                    gradioImg2imgTool = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("opt_channelslast"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    optChannelslast = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("styles_file"))
                {
                    stylesFile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autolaunch"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autolaunch = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("theme"))
                {
                    theme = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("use_textbox_seed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    useTextboxSeed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("disable_console_progressbars"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    disableConsoleProgressbars = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enable_console_prompts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableConsolePrompts = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("vae_path"))
                {
                    vaePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("disable_safe_unpickle"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    disableSafeUnpickle = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("api"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    api = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("api_auth"))
                {
                    apiAuth = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nowebui"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nowebui = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ui_debug_mode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    uiDebugMode = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("device_id"))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("administrator"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    administrator = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cors_allow_origins"))
                {
                    corsAllowOrigins = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tls_keyfile"))
                {
                    tlsKeyfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tls_certfile"))
                {
                    tlsCertfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("server_name"))
                {
                    serverName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dreambooth_models_path"))
                {
                    dreamboothModelsPath = property.Value.GetString();
                    continue;
                }
            }
            return new Flags(config.Value, ckpt.Value, ckptDir.Value, gfpganDir.Value, gfpganModel.Value, Optional.ToNullable(noHalf), Optional.ToNullable(noHalfVae), Optional.ToNullable(noProgressbarHiding), Optional.ToNullable(maxBatchCount), embeddingsDir.Value, hypernetworkDir.Value, localizationsDir.Value, Optional.ToNullable(allowCode), Optional.ToNullable(medvram), Optional.ToNullable(lowvram), Optional.ToNullable(lowram), Optional.ToNullable(alwaysBatchCondUncond), Optional.ToNullable(unloadGfpgan), precision.Value, Optional.ToNullable(share), ngrok.Value, ngrokRegion.Value, Optional.ToNullable(enableInsecureExtensionAccess), codeformerModelsPath.Value, gfpganModelsPath.Value, esrganModelsPath.Value, bsrganModelsPath.Value, realesrganModelsPath.Value, scunetModelsPath.Value, swinirModelsPath.Value, ldsrModelsPath.Value, clipModelsPath.Value, Optional.ToNullable(xformers), Optional.ToNullable(forceEnableXformers), Optional.ToNullable(deepdanbooru), Optional.ToNullable(optSplitAttention), Optional.ToNullable(optSplitAttentionInvokeai), Optional.ToNullable(optSplitAttentionV1), Optional.ToNullable(disableOptSplitAttention), Optional.ToList(useCpu), Optional.ToNullable(listen), port.Value, Optional.ToNullable(showNegativePrompt), uiConfigFile.Value, Optional.ToNullable(hideUiDirConfig), Optional.ToNullable(freezeSettings), uiSettingsFile.Value, Optional.ToNullable(gradioDebug), gradioAuth.Value, gradioImg2imgTool.Value, Optional.ToNullable(optChannelslast), stylesFile.Value, Optional.ToNullable(autolaunch), theme.Value, Optional.ToNullable(useTextboxSeed), Optional.ToNullable(disableConsoleProgressbars), Optional.ToNullable(enableConsolePrompts), vaePath.Value, Optional.ToNullable(disableSafeUnpickle), Optional.ToNullable(api), apiAuth.Value, Optional.ToNullable(nowebui), Optional.ToNullable(uiDebugMode), deviceId.Value, Optional.ToNullable(administrator), corsAllowOrigins.Value, tlsKeyfile.Value, tlsCertfile.Value, serverName.Value, dreamboothModelsPath.Value);
        }
    }
}
