// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace StableDiffusionWebUI.Client.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class StableDiffusionWebUIModelFactory
    {
        /// <summary> Initializes a new instance of HttpValidationError. </summary>
        /// <param name="detail"> Detail. </param>
        /// <returns> A new <see cref="Models.HttpValidationError"/> instance for mocking. </returns>
        public static HttpValidationError HttpValidationError(IEnumerable<ValidationError> detail = null)
        {
            detail ??= new List<ValidationError>();

            return new HttpValidationError(detail?.ToList());
        }

        /// <summary> Initializes a new instance of ValidationError. </summary>
        /// <param name="loc"> Location. </param>
        /// <param name="msg"> Message. </param>
        /// <param name="type"> Error Type. </param>
        /// <returns> A new <see cref="Models.ValidationError"/> instance for mocking. </returns>
        public static ValidationError ValidationError(IEnumerable<ValidationErrorLocItem> loc = null, string msg = null, string type = null)
        {
            loc ??= new List<ValidationErrorLocItem>();

            return new ValidationError(loc?.ToList(), msg, type);
        }

        /// <summary> Initializes a new instance of Estimation. </summary>
        /// <param name="msg"> Msg. </param>
        /// <param name="rank"> Rank. </param>
        /// <param name="queueSize"> Queue Size. </param>
        /// <param name="avgEventProcessTime"> Avg Event Process Time. </param>
        /// <param name="avgEventConcurrentProcessTime"> Avg Event Concurrent Process Time. </param>
        /// <param name="rankEta"> Rank Eta. </param>
        /// <param name="queueEta"> Queue Eta. </param>
        /// <returns> A new <see cref="Models.Estimation"/> instance for mocking. </returns>
        public static Estimation Estimation(string msg = null, int? rank = null, int queueSize = default, float? avgEventProcessTime = null, float? avgEventConcurrentProcessTime = null, int? rankEta = null, int queueEta = default)
        {
            return new Estimation(msg, rank, queueSize, avgEventProcessTime, avgEventConcurrentProcessTime, rankEta, queueEta);
        }

        /// <summary> Initializes a new instance of TextToImageResponse. </summary>
        /// <param name="images"> The generated image in base64 format. </param>
        /// <param name="parameters"> Parameters. </param>
        /// <param name="info"> Info. </param>
        /// <returns> A new <see cref="Models.TextToImageResponse"/> instance for mocking. </returns>
        public static TextToImageResponse TextToImageResponse(IEnumerable<string> images = null, object parameters = null, string info = null)
        {
            images ??= new List<string>();

            return new TextToImageResponse(images?.ToList(), parameters, info);
        }

        /// <summary> Initializes a new instance of ImageToImageResponse. </summary>
        /// <param name="images"> The generated image in base64 format. </param>
        /// <param name="parameters"> Parameters. </param>
        /// <param name="info"> Info. </param>
        /// <returns> A new <see cref="Models.ImageToImageResponse"/> instance for mocking. </returns>
        public static ImageToImageResponse ImageToImageResponse(IEnumerable<string> images = null, object parameters = null, string info = null)
        {
            images ??= new List<string>();

            return new ImageToImageResponse(images?.ToList(), parameters, info);
        }

        /// <summary> Initializes a new instance of ExtrasSingleImageResponse. </summary>
        /// <param name="htmlInfo"> A series of HTML tags containing the process info. </param>
        /// <param name="image"> The generated image in base64 format. </param>
        /// <returns> A new <see cref="Models.ExtrasSingleImageResponse"/> instance for mocking. </returns>
        public static ExtrasSingleImageResponse ExtrasSingleImageResponse(string htmlInfo = null, string image = null)
        {
            return new ExtrasSingleImageResponse(htmlInfo, image);
        }

        /// <summary> Initializes a new instance of ExtrasBatchImagesResponse. </summary>
        /// <param name="htmlInfo"> A series of HTML tags containing the process info. </param>
        /// <param name="images"> The generated images in base64 format. </param>
        /// <returns> A new <see cref="Models.ExtrasBatchImagesResponse"/> instance for mocking. </returns>
        public static ExtrasBatchImagesResponse ExtrasBatchImagesResponse(string htmlInfo = null, IEnumerable<string> images = null)
        {
            images ??= new List<string>();

            return new ExtrasBatchImagesResponse(htmlInfo, images?.ToList());
        }

        /// <summary> Initializes a new instance of PNGInfoResponse. </summary>
        /// <param name="info"> A string with all the info the image had. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="info"/> is null. </exception>
        /// <returns> A new <see cref="Models.PNGInfoResponse"/> instance for mocking. </returns>
        public static PNGInfoResponse PNGInfoResponse(string info = null)
        {
            if (info == null)
            {
                throw new ArgumentNullException(nameof(info));
            }

            return new PNGInfoResponse(info);
        }

        /// <summary> Initializes a new instance of ProgressResponse. </summary>
        /// <param name="progress"> The progress with a range of 0 to 1. </param>
        /// <param name="etaRelative"> ETA in secs. </param>
        /// <param name="state"> The current state snapshot. </param>
        /// <param name="currentImage"> The current image in base64 format. opts.show_progress_every_n_steps is required for this to work. </param>
        /// <returns> A new <see cref="Models.ProgressResponse"/> instance for mocking. </returns>
        public static ProgressResponse ProgressResponse(float progress = default, float etaRelative = default, object state = null, string currentImage = null)
        {
            return new ProgressResponse(progress, etaRelative, state, currentImage);
        }

        /// <summary> Initializes a new instance of Options. </summary>
        /// <param name="samplesSave"> Always save all generated images. </param>
        /// <param name="samplesFormat"> File format for images. </param>
        /// <param name="samplesFilenamePattern"> Images filename pattern. </param>
        /// <param name="saveImagesAddNumber"> Add number to filename when saving. </param>
        /// <param name="gridSave"> Always save all generated image grids. </param>
        /// <param name="gridFormat"> File format for grids. </param>
        /// <param name="gridExtendedFilename"> Add extended info (seed, prompt) to filename when saving grid. </param>
        /// <param name="gridOnlyIfMultiple"> Do not save grids consisting of one picture. </param>
        /// <param name="gridPreventEmptySpots"> Prevent empty spots in grid (when set to autodetect). </param>
        /// <param name="nRows"> Grid row count; use -1 for autodetect and 0 for it to be same as batch size. </param>
        /// <param name="enablePnginfo"> Save text information about generation parameters as chunks to png files. </param>
        /// <param name="saveTxt"> Create a text file next to every image with generation parameters. </param>
        /// <param name="saveImagesBeforeFaceRestoration"> Save a copy of image before doing face restoration. </param>
        /// <param name="saveImagesBeforeHighresFix"> Save a copy of image before applying highres fix. </param>
        /// <param name="saveImagesBeforeColorCorrection"> Save a copy of image before applying color correction to img2img results. </param>
        /// <param name="jpegQuality"> Quality for saved jpeg images. </param>
        /// <param name="exportFor4Chan"> If PNG image is larger than 4MB or any dimension is larger than 4000, downscale and save copy as JPG. </param>
        /// <param name="useOriginalNameBatch"> Use original name for output filename during batch process in extras tab. </param>
        /// <param name="saveSelectedOnly"> When using &apos;Save&apos; button, only save a single selected image. </param>
        /// <param name="doNotAddWatermark"> Do not add watermark to images. </param>
        /// <param name="outdirSamples"> Output directory for images; if empty, defaults to three directories below. </param>
        /// <param name="outdirTxt2ImgSamples"> Output directory for txt2img images. </param>
        /// <param name="outdirImg2ImgSamples"> Output directory for img2img images. </param>
        /// <param name="outdirExtrasSamples"> Output directory for images from extras tab. </param>
        /// <param name="outdirGrids"> Output directory for grids; if empty, defaults to two directories below. </param>
        /// <param name="outdirTxt2ImgGrids"> Output directory for txt2img grids. </param>
        /// <param name="outdirImg2ImgGrids"> Output directory for img2img grids. </param>
        /// <param name="outdirSave"> Directory for saving images using the Save button. </param>
        /// <param name="saveToDirs"> Save images to a subdirectory. </param>
        /// <param name="gridSaveToDirs"> Save grids to a subdirectory. </param>
        /// <param name="useSaveToDirsForUi"> When using &quot;Save&quot; button, save images to a subdirectory. </param>
        /// <param name="directoriesFilenamePattern"> Directory name pattern. </param>
        /// <param name="directoriesMaxPromptWords"> Max prompt words for [prompt_words] pattern. </param>
        /// <param name="esrganTile"> Tile size for ESRGAN upscalers. 0 = no tiling. </param>
        /// <param name="esrganTileOverlap"> Tile overlap, in pixels for ESRGAN upscalers. Low values = visible seam. </param>
        /// <param name="realesrganEnabledModels"> Select which Real-ESRGAN models to show in the web UI. (Requires restart). </param>
        /// <param name="swinTile"> Tile size for all SwinIR. </param>
        /// <param name="swinTileOverlap"> Tile overlap, in pixels for SwinIR. Low values = visible seam. </param>
        /// <param name="ldsrSteps"> LDSR processing steps. Lower = faster. </param>
        /// <param name="upscalerForImg2Img"> Upscaler for img2img. </param>
        /// <param name="useScaleLatentForHiresFix"> Upscale latent space image when doing hires. fix. </param>
        /// <param name="faceRestorationModel"> Face restoration model. </param>
        /// <param name="codeFormerWeight"> CodeFormer weight parameter; 0 = maximum effect; 1 = minimum effect. </param>
        /// <param name="faceRestorationUnload"> Move face restoration model from VRAM into RAM after processing. </param>
        /// <param name="memmonPollRate"> VRAM usage polls per second during generation. Set to 0 to disable. </param>
        /// <param name="samplesLogStdout"> Always print all generation info to standard output. </param>
        /// <param name="multipleTqdm"> Add a second progress bar to the console that shows progress for an entire job. </param>
        /// <param name="unloadModelsWhenTraining"> Move VAE and CLIP to RAM when training if possible. Saves VRAM. </param>
        /// <param name="shuffleTags"> Shuffleing tags by &apos;,&apos; when create texts. </param>
        /// <param name="tagDropOut"> Dropout tags when create texts. </param>
        /// <param name="saveOptimizerState"> Saves Optimizer state as separate *.optim file. Training can be resumed with HN itself and matching optim file. </param>
        /// <param name="datasetFilenameWordRegex"> Filename word regex. </param>
        /// <param name="datasetFilenameJoinString"> Filename join string. </param>
        /// <param name="trainingImageRepeatsPerEpoch"> Number of repeats for a single input image per epoch; used only for displaying epoch number. </param>
        /// <param name="trainingWriteCsvEvery"> Save an csv containing the loss to log directory every N steps, 0 to disable. </param>
        /// <param name="trainingXattentionOptimizations"> Use cross attention optimizations while training. </param>
        /// <param name="sdModelCheckpoint"> Stable Diffusion checkpoint. </param>
        /// <param name="sdCheckpointCache"> Checkpoints to cache in RAM. </param>
        /// <param name="sdVae"> SD VAE. </param>
        /// <param name="sdVaeAsDefault"> Ignore selected VAE for stable diffusion checkpoints that have their own .vae.pt next to them. </param>
        /// <param name="sdHypernetwork"> Hypernetwork. </param>
        /// <param name="sdHypernetworkStrength"> Hypernetwork strength. </param>
        /// <param name="inpaintingMaskWeight"> Inpainting conditioning mask strength. </param>
        /// <param name="img2ImgColorCorrection"> Apply color correction to img2img results to match original colors. </param>
        /// <param name="img2ImgFixSteps"> With img2img, do exactly the amount of steps the slider specifies (normally you&apos;d do less with less denoising). </param>
        /// <param name="enableQuantization"> Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds. Requires restart to apply. </param>
        /// <param name="enableEmphasis"> Emphasis: use (text) to make model pay more attention to text and [text] to make it pay less attention. </param>
        /// <param name="useOldEmphasisImplementation"> Use old emphasis implementation. Can be useful to reproduce old seeds. </param>
        /// <param name="enableBatchSeeds"> Make K-diffusion samplers produce same images in a batch as when making a single image. </param>
        /// <param name="commaPaddingBacktrack"> Increase coherency by padding from the last comma within n tokens when using more than 75 tokens. </param>
        /// <param name="filterNsfw"> Filter NSFW content. </param>
        /// <param name="clipStopAtLastLayers"> Stop At last layers of CLIP model. </param>
        /// <param name="randomArtistCategories"> Allowed categories for random artists selection when using the Roll button. </param>
        /// <param name="interrogateKeepModelsInMemory"> Interrogate: keep models in VRAM. </param>
        /// <param name="interrogateUseBuiltinArtists"> Interrogate: use artists from artists.csv. </param>
        /// <param name="interrogateReturnRanks"> Interrogate: include ranks of model tags matches in results (Has no effect on caption-based interrogators). </param>
        /// <param name="interrogateClipNumBeams"> Interrogate: num_beams for BLIP. </param>
        /// <param name="interrogateClipMinLength"> Interrogate: minimum description length (excluding artists, etc..). </param>
        /// <param name="interrogateClipMaxLength"> Interrogate: maximum description length. </param>
        /// <param name="interrogateClipDictLimit"> CLIP: maximum number of lines in text file (0 = No limit). </param>
        /// <param name="interrogateDeepbooruScoreThreshold"> Interrogate: deepbooru score threshold. </param>
        /// <param name="deepbooruSortAlpha"> Interrogate: deepbooru sort alphabetically. </param>
        /// <param name="deepbooruUseSpaces"> use spaces for tags in deepbooru. </param>
        /// <param name="deepbooruEscape"> escape (\) brackets in deepbooru (so they are used as literal brackets and not for emphasis). </param>
        /// <param name="showProgressbar"> Show progressbar. </param>
        /// <param name="showProgressEveryNSteps"> Show image creation progress every N sampling steps. Set to 0 to disable. Set to -1 to show after completion of batch. </param>
        /// <param name="showProgressGrid"> Show previews of all images generated in a batch as a grid. </param>
        /// <param name="returnGrid"> Show grid in results for web. </param>
        /// <param name="doNotShowImages"> Do not show any images in results for web. </param>
        /// <param name="addModelHashToInfo"> Add model hash to generation information. </param>
        /// <param name="addModelNameToInfo"> Add model name to generation information. </param>
        /// <param name="disableWeightsAutoSwap"> When reading generation parameters from text into UI (from PNG info or pasted text), do not change the selected model/checkpoint. </param>
        /// <param name="sendSeed"> Send seed when sending prompt or image to other interface. </param>
        /// <param name="font"> Font for image grids that have text. </param>
        /// <param name="jsModalLightbox"> Enable full page image viewer. </param>
        /// <param name="jsModalLightboxInitiallyZoomed"> Show images zoomed in by default in full page image viewer. </param>
        /// <param name="showProgressInTitle"> Show generation progress in window title. </param>
        /// <param name="quicksettings"> Quicksettings list. </param>
        /// <param name="localization"> Localization (requires restart). </param>
        /// <param name="hideSamplers"> Hide samplers in user interface (requires restart). </param>
        /// <param name="etaDdim"> eta (noise multiplier) for DDIM. </param>
        /// <param name="etaAncestral"> eta (noise multiplier) for ancestral samplers. </param>
        /// <param name="ddimDiscretize"> img2img DDIM discretize. </param>
        /// <param name="sChurn"> sigma churn. </param>
        /// <param name="sTmin"> sigma tmin. </param>
        /// <param name="sNoise"> sigma noise. </param>
        /// <param name="etaNoiseSeedDelta"> Eta noise seed delta. </param>
        /// <param name="disabledExtensions"> Disable those extensions. </param>
        /// <returns> A new <see cref="Models.Options"/> instance for mocking. </returns>
        public static Options Options(bool? samplesSave = null, string samplesFormat = null, string samplesFilenamePattern = null, bool? saveImagesAddNumber = null, bool? gridSave = null, string gridFormat = null, bool? gridExtendedFilename = null, bool? gridOnlyIfMultiple = null, bool? gridPreventEmptySpots = null, float? nRows = null, bool? enablePnginfo = null, bool? saveTxt = null, bool? saveImagesBeforeFaceRestoration = null, bool? saveImagesBeforeHighresFix = null, bool? saveImagesBeforeColorCorrection = null, float? jpegQuality = null, bool? exportFor4Chan = null, bool? useOriginalNameBatch = null, bool? saveSelectedOnly = null, bool? doNotAddWatermark = null, string outdirSamples = null, string outdirTxt2ImgSamples = null, string outdirImg2ImgSamples = null, string outdirExtrasSamples = null, string outdirGrids = null, string outdirTxt2ImgGrids = null, string outdirImg2ImgGrids = null, string outdirSave = null, bool? saveToDirs = null, bool? gridSaveToDirs = null, bool? useSaveToDirsForUi = null, string directoriesFilenamePattern = null, float? directoriesMaxPromptWords = null, float? esrganTile = null, float? esrganTileOverlap = null, IEnumerable<object> realesrganEnabledModels = null, float? swinTile = null, float? swinTileOverlap = null, float? ldsrSteps = null, string upscalerForImg2Img = null, bool? useScaleLatentForHiresFix = null, string faceRestorationModel = null, float? codeFormerWeight = null, bool? faceRestorationUnload = null, float? memmonPollRate = null, bool? samplesLogStdout = null, bool? multipleTqdm = null, bool? unloadModelsWhenTraining = null, bool? shuffleTags = null, float? tagDropOut = null, bool? saveOptimizerState = null, string datasetFilenameWordRegex = null, string datasetFilenameJoinString = null, float? trainingImageRepeatsPerEpoch = null, float? trainingWriteCsvEvery = null, bool? trainingXattentionOptimizations = null, string sdModelCheckpoint = null, float? sdCheckpointCache = null, string sdVae = null, string sdVaeAsDefault = null, string sdHypernetwork = null, int? sdHypernetworkStrength = null, int? inpaintingMaskWeight = null, bool? img2ImgColorCorrection = null, bool? img2ImgFixSteps = null, bool? enableQuantization = null, bool? enableEmphasis = null, bool? useOldEmphasisImplementation = null, bool? enableBatchSeeds = null, float? commaPaddingBacktrack = null, bool? filterNsfw = null, float? clipStopAtLastLayers = null, IEnumerable<object> randomArtistCategories = null, bool? interrogateKeepModelsInMemory = null, bool? interrogateUseBuiltinArtists = null, bool? interrogateReturnRanks = null, float? interrogateClipNumBeams = null, float? interrogateClipMinLength = null, float? interrogateClipMaxLength = null, float? interrogateClipDictLimit = null, float? interrogateDeepbooruScoreThreshold = null, bool? deepbooruSortAlpha = null, bool? deepbooruUseSpaces = null, bool? deepbooruEscape = null, bool? showProgressbar = null, float? showProgressEveryNSteps = null, bool? showProgressGrid = null, bool? returnGrid = null, bool? doNotShowImages = null, bool? addModelHashToInfo = null, bool? addModelNameToInfo = null, bool? disableWeightsAutoSwap = null, bool? sendSeed = null, string font = null, bool? jsModalLightbox = null, bool? jsModalLightboxInitiallyZoomed = null, bool? showProgressInTitle = null, string quicksettings = null, string localization = null, IEnumerable<object> hideSamplers = null, int? etaDdim = null, int? etaAncestral = null, string ddimDiscretize = null, int? sChurn = null, int? sTmin = null, int? sNoise = null, float? etaNoiseSeedDelta = null, IEnumerable<object> disabledExtensions = null)
        {
            realesrganEnabledModels ??= new List<object>();
            randomArtistCategories ??= new List<object>();
            hideSamplers ??= new List<object>();
            disabledExtensions ??= new List<object>();

            return new Options(samplesSave, samplesFormat, samplesFilenamePattern, saveImagesAddNumber, gridSave, gridFormat, gridExtendedFilename, gridOnlyIfMultiple, gridPreventEmptySpots, nRows, enablePnginfo, saveTxt, saveImagesBeforeFaceRestoration, saveImagesBeforeHighresFix, saveImagesBeforeColorCorrection, jpegQuality, exportFor4Chan, useOriginalNameBatch, saveSelectedOnly, doNotAddWatermark, outdirSamples, outdirTxt2ImgSamples, outdirImg2ImgSamples, outdirExtrasSamples, outdirGrids, outdirTxt2ImgGrids, outdirImg2ImgGrids, outdirSave, saveToDirs, gridSaveToDirs, useSaveToDirsForUi, directoriesFilenamePattern, directoriesMaxPromptWords, esrganTile, esrganTileOverlap, realesrganEnabledModels?.ToList(), swinTile, swinTileOverlap, ldsrSteps, upscalerForImg2Img, useScaleLatentForHiresFix, faceRestorationModel, codeFormerWeight, faceRestorationUnload, memmonPollRate, samplesLogStdout, multipleTqdm, unloadModelsWhenTraining, shuffleTags, tagDropOut, saveOptimizerState, datasetFilenameWordRegex, datasetFilenameJoinString, trainingImageRepeatsPerEpoch, trainingWriteCsvEvery, trainingXattentionOptimizations, sdModelCheckpoint, sdCheckpointCache, sdVae, sdVaeAsDefault, sdHypernetwork, sdHypernetworkStrength, inpaintingMaskWeight, img2ImgColorCorrection, img2ImgFixSteps, enableQuantization, enableEmphasis, useOldEmphasisImplementation, enableBatchSeeds, commaPaddingBacktrack, filterNsfw, clipStopAtLastLayers, randomArtistCategories?.ToList(), interrogateKeepModelsInMemory, interrogateUseBuiltinArtists, interrogateReturnRanks, interrogateClipNumBeams, interrogateClipMinLength, interrogateClipMaxLength, interrogateClipDictLimit, interrogateDeepbooruScoreThreshold, deepbooruSortAlpha, deepbooruUseSpaces, deepbooruEscape, showProgressbar, showProgressEveryNSteps, showProgressGrid, returnGrid, doNotShowImages, addModelHashToInfo, addModelNameToInfo, disableWeightsAutoSwap, sendSeed, font, jsModalLightbox, jsModalLightboxInitiallyZoomed, showProgressInTitle, quicksettings, localization, hideSamplers?.ToList(), etaDdim, etaAncestral, ddimDiscretize, sChurn, sTmin, sNoise, etaNoiseSeedDelta, disabledExtensions?.ToList());
        }

        /// <summary> Initializes a new instance of Flags. </summary>
        /// <param name="config"> path to config which constructs model. </param>
        /// <param name="ckpt"> path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded. </param>
        /// <param name="ckptDir"> Path to directory with stable diffusion checkpoints. </param>
        /// <param name="gfpganDir"> GFPGAN directory. </param>
        /// <param name="gfpganModel"> GFPGAN model file name. </param>
        /// <param name="noHalf"> do not switch the model to 16-bit floats. </param>
        /// <param name="noHalfVae"> do not switch the VAE model to 16-bit floats. </param>
        /// <param name="noProgressbarHiding"> do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser). </param>
        /// <param name="maxBatchCount"> maximum batch count value for the UI. </param>
        /// <param name="embeddingsDir"> embeddings directory for textual inversion (default: embeddings). </param>
        /// <param name="hypernetworkDir"> hypernetwork directory. </param>
        /// <param name="localizationsDir"> localizations directory. </param>
        /// <param name="allowCode"> allow custom script execution from webui. </param>
        /// <param name="medvram"> enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage. </param>
        /// <param name="lowvram"> enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage. </param>
        /// <param name="lowram"> load stable diffusion checkpoint weights to VRAM instead of RAM. </param>
        /// <param name="alwaysBatchCondUncond"> disables cond/uncond batching that is enabled to save memory with --medvram or --lowvram. </param>
        /// <param name="unloadGfpgan"> does not do anything. </param>
        /// <param name="precision"> evaluate at this precision. </param>
        /// <param name="share"> use share=True for gradio and make the UI accessible through their site. </param>
        /// <param name="ngrok"> ngrok authtoken, alternative to gradio --share. </param>
        /// <param name="ngrokRegion"> The region in which ngrok should start. </param>
        /// <param name="enableInsecureExtensionAccess"> enable extensions tab regardless of other options. </param>
        /// <param name="codeformerModelsPath"> Path to directory with codeformer model file(s). </param>
        /// <param name="gfpganModelsPath"> Path to directory with GFPGAN model file(s). </param>
        /// <param name="esrganModelsPath"> Path to directory with ESRGAN model file(s). </param>
        /// <param name="bsrganModelsPath"> Path to directory with BSRGAN model file(s). </param>
        /// <param name="realesrganModelsPath"> Path to directory with RealESRGAN model file(s). </param>
        /// <param name="scunetModelsPath"> Path to directory with ScuNET model file(s). </param>
        /// <param name="swinirModelsPath"> Path to directory with SwinIR model file(s). </param>
        /// <param name="ldsrModelsPath"> Path to directory with LDSR model file(s). </param>
        /// <param name="clipModelsPath"> Path to directory with CLIP model file(s). </param>
        /// <param name="xformers"> enable xformers for cross attention layers. </param>
        /// <param name="forceEnableXformers"> enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work. </param>
        /// <param name="deepdanbooru"> enable deepdanbooru interrogator. </param>
        /// <param name="optSplitAttention"> force-enables Doggettx&apos;s cross-attention layer optimization. By default, it&apos;s on for torch cuda. </param>
        /// <param name="optSplitAttentionInvokeai"> force-enables InvokeAI&apos;s cross-attention layer optimization. By default, it&apos;s on when cuda is unavailable. </param>
        /// <param name="optSplitAttentionV1"> enable older version of split attention optimization that does not consume all the VRAM it can find. </param>
        /// <param name="disableOptSplitAttention"> force-disables cross-attention layer optimization. </param>
        /// <param name="useCpu"> use CPU as torch device for specified modules. </param>
        /// <param name="listen"> launch gradio with 0.0.0.0 as server name, allowing to respond to network requests. </param>
        /// <param name="port"> launch gradio with given server port, you need root/admin rights for ports &lt; 1024, defaults to 7860 if available. </param>
        /// <param name="showNegativePrompt"> does not do anything. </param>
        /// <param name="uiConfigFile"> filename to use for ui configuration. </param>
        /// <param name="hideUiDirConfig"> hide directory configuration from webui. </param>
        /// <param name="freezeSettings"> disable editing settings. </param>
        /// <param name="uiSettingsFile"> filename to use for ui settings. </param>
        /// <param name="gradioDebug"> launch gradio with --debug option. </param>
        /// <param name="gradioAuth"> set gradio authentication like &quot;username:password&quot;; or comma-delimit multiple like &quot;u1:p1,u2:p2,u3:p3&quot;. </param>
        /// <param name="gradioImg2ImgTool"> gradio image uploader tool: can be either editor for ctopping, or color-sketch for drawing. </param>
        /// <param name="optChannelslast"> change memory type for stable diffusion to channels last. </param>
        /// <param name="stylesFile"> filename to use for styles. </param>
        /// <param name="autolaunch"> open the webui URL in the system&apos;s default browser upon launch. </param>
        /// <param name="theme"> launches the UI with light or dark theme. </param>
        /// <param name="useTextboxSeed"> use textbox for seeds in UI (no up/down, but possible to input long seeds). </param>
        /// <param name="disableConsoleProgressbars"> do not output progressbars to console. </param>
        /// <param name="enableConsolePrompts"> print prompts to console when generating with txt2img and img2img. </param>
        /// <param name="vaePath"> Path to Variational Autoencoders model. </param>
        /// <param name="disableSafeUnpickle"> disable checking pytorch models for malicious code. </param>
        /// <param name="api"> use api=True to launch the api with the webui. </param>
        /// <param name="apiAuth"> Set authentication for api like &quot;username:password&quot;; or comma-delimit multiple like &quot;u1:p1,u2:p2,u3:p3&quot;. </param>
        /// <param name="nowebui"> use api=True to launch the api instead of the webui. </param>
        /// <param name="uiDebugMode"> Don&apos;t load model to quickly launch UI. </param>
        /// <param name="deviceId"> Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before). </param>
        /// <param name="administrator"> Administrator rights. </param>
        /// <param name="corsAllowOrigins"> Allowed CORS origins. </param>
        /// <param name="tlsKeyfile"> Partially enables TLS, requires --tls-certfile to fully function. </param>
        /// <param name="tlsCertfile"> Partially enables TLS, requires --tls-keyfile to fully function. </param>
        /// <param name="serverName"> Sets hostname of server. </param>
        /// <param name="dreamboothModelsPath"> Path to directory to store Dreambooth model file(s). </param>
        /// <returns> A new <see cref="Models.Flags"/> instance for mocking. </returns>
        public static Flags Flags(string config = null, string ckpt = null, string ckptDir = null, string gfpganDir = null, string gfpganModel = null, bool? noHalf = null, bool? noHalfVae = null, bool? noProgressbarHiding = null, int? maxBatchCount = null, string embeddingsDir = null, string hypernetworkDir = null, string localizationsDir = null, bool? allowCode = null, bool? medvram = null, bool? lowvram = null, bool? lowram = null, bool? alwaysBatchCondUncond = null, bool? unloadGfpgan = null, string precision = null, bool? share = null, string ngrok = null, string ngrokRegion = null, bool? enableInsecureExtensionAccess = null, string codeformerModelsPath = null, string gfpganModelsPath = null, string esrganModelsPath = null, string bsrganModelsPath = null, string realesrganModelsPath = null, string scunetModelsPath = null, string swinirModelsPath = null, string ldsrModelsPath = null, string clipModelsPath = null, bool? xformers = null, bool? forceEnableXformers = null, bool? deepdanbooru = null, bool? optSplitAttention = null, bool? optSplitAttentionInvokeai = null, bool? optSplitAttentionV1 = null, bool? disableOptSplitAttention = null, IEnumerable<object> useCpu = null, bool? listen = null, string port = null, bool? showNegativePrompt = null, string uiConfigFile = null, bool? hideUiDirConfig = null, bool? freezeSettings = null, string uiSettingsFile = null, bool? gradioDebug = null, string gradioAuth = null, string gradioImg2ImgTool = null, bool? optChannelslast = null, string stylesFile = null, bool? autolaunch = null, string theme = null, bool? useTextboxSeed = null, bool? disableConsoleProgressbars = null, bool? enableConsolePrompts = null, string vaePath = null, bool? disableSafeUnpickle = null, bool? api = null, string apiAuth = null, bool? nowebui = null, bool? uiDebugMode = null, string deviceId = null, bool? administrator = null, string corsAllowOrigins = null, string tlsKeyfile = null, string tlsCertfile = null, string serverName = null, string dreamboothModelsPath = null)
        {
            useCpu ??= new List<object>();

            return new Flags(config, ckpt, ckptDir, gfpganDir, gfpganModel, noHalf, noHalfVae, noProgressbarHiding, maxBatchCount, embeddingsDir, hypernetworkDir, localizationsDir, allowCode, medvram, lowvram, lowram, alwaysBatchCondUncond, unloadGfpgan, precision, share, ngrok, ngrokRegion, enableInsecureExtensionAccess, codeformerModelsPath, gfpganModelsPath, esrganModelsPath, bsrganModelsPath, realesrganModelsPath, scunetModelsPath, swinirModelsPath, ldsrModelsPath, clipModelsPath, xformers, forceEnableXformers, deepdanbooru, optSplitAttention, optSplitAttentionInvokeai, optSplitAttentionV1, disableOptSplitAttention, useCpu?.ToList(), listen, port, showNegativePrompt, uiConfigFile, hideUiDirConfig, freezeSettings, uiSettingsFile, gradioDebug, gradioAuth, gradioImg2ImgTool, optChannelslast, stylesFile, autolaunch, theme, useTextboxSeed, disableConsoleProgressbars, enableConsolePrompts, vaePath, disableSafeUnpickle, api, apiAuth, nowebui, uiDebugMode, deviceId, administrator, corsAllowOrigins, tlsKeyfile, tlsCertfile, serverName, dreamboothModelsPath);
        }

        /// <summary> Initializes a new instance of SamplerItem. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="aliases"> Aliases. </param>
        /// <param name="options"> Options. </param>
        /// <returns> A new <see cref="Models.SamplerItem"/> instance for mocking. </returns>
        public static SamplerItem SamplerItem(string name = null, IEnumerable<string> aliases = null, IReadOnlyDictionary<string, string> options = null)
        {
            aliases ??= new List<string>();
            options ??= new Dictionary<string, string>();

            return new SamplerItem(name, aliases?.ToList(), options);
        }

        /// <summary> Initializes a new instance of UpscalerItem. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="modelName"> Model Name. </param>
        /// <param name="modelPath"> Path. </param>
        /// <param name="modelUrl"> URL. </param>
        /// <returns> A new <see cref="Models.UpscalerItem"/> instance for mocking. </returns>
        public static UpscalerItem UpscalerItem(string name = null, string modelName = null, string modelPath = null, string modelUrl = null)
        {
            return new UpscalerItem(name, modelName, modelPath, modelUrl);
        }

        /// <summary> Initializes a new instance of SDModelItem. </summary>
        /// <param name="title"> Title. </param>
        /// <param name="modelName"> Model Name. </param>
        /// <param name="hash"> Hash. </param>
        /// <param name="filename"> Filename. </param>
        /// <param name="config"> Config file. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="title"/>, <paramref name="modelName"/>, <paramref name="hash"/>, <paramref name="filename"/> or <paramref name="config"/> is null. </exception>
        /// <returns> A new <see cref="Models.SDModelItem"/> instance for mocking. </returns>
        public static SDModelItem SDModelItem(string title = null, string modelName = null, string hash = null, string filename = null, string config = null)
        {
            if (title == null)
            {
                throw new ArgumentNullException(nameof(title));
            }
            if (modelName == null)
            {
                throw new ArgumentNullException(nameof(modelName));
            }
            if (hash == null)
            {
                throw new ArgumentNullException(nameof(hash));
            }
            if (filename == null)
            {
                throw new ArgumentNullException(nameof(filename));
            }
            if (config == null)
            {
                throw new ArgumentNullException(nameof(config));
            }

            return new SDModelItem(title, modelName, hash, filename, config);
        }

        /// <summary> Initializes a new instance of HypernetworkItem. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="path"> Path. </param>
        /// <returns> A new <see cref="Models.HypernetworkItem"/> instance for mocking. </returns>
        public static HypernetworkItem HypernetworkItem(string name = null, string path = null)
        {
            return new HypernetworkItem(name, path);
        }

        /// <summary> Initializes a new instance of FaceRestorerItem. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="cmdDir"> Path. </param>
        /// <returns> A new <see cref="Models.FaceRestorerItem"/> instance for mocking. </returns>
        public static FaceRestorerItem FaceRestorerItem(string name = null, string cmdDir = null)
        {
            return new FaceRestorerItem(name, cmdDir);
        }

        /// <summary> Initializes a new instance of RealesrganItem. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="path"> Path. </param>
        /// <param name="scale"> Scale. </param>
        /// <returns> A new <see cref="Models.RealesrganItem"/> instance for mocking. </returns>
        public static RealesrganItem RealesrganItem(string name = null, string path = null, int? scale = null)
        {
            return new RealesrganItem(name, path, scale);
        }

        /// <summary> Initializes a new instance of PromptStyleItem. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="prompt"> Prompt. </param>
        /// <param name="negativePrompt"> Negative Prompt. </param>
        /// <returns> A new <see cref="Models.PromptStyleItem"/> instance for mocking. </returns>
        public static PromptStyleItem PromptStyleItem(string name = null, string prompt = null, string negativePrompt = null)
        {
            return new PromptStyleItem(name, prompt, negativePrompt);
        }

        /// <summary> Initializes a new instance of ArtistItem. </summary>
        /// <param name="name"> Name. </param>
        /// <param name="score"> Score. </param>
        /// <param name="category"> Category. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="category"/> is null. </exception>
        /// <returns> A new <see cref="Models.ArtistItem"/> instance for mocking. </returns>
        public static ArtistItem ArtistItem(string name = null, float score = default, string category = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (category == null)
            {
                throw new ArgumentNullException(nameof(category));
            }

            return new ArtistItem(name, score, category);
        }
    }
}
